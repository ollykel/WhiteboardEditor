openapi: 3.0.4
info:
  title: Whiteboard Editor API
  description: API for the Whiteboard Editor
  version: 0.1.0

servers:
  - url: https://localhost:8080/api/v1
    description: Development url for the Whiteboard Editor API.

paths:
  /auth/login:
    post:
      summary: Generate a new JWT authentication token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AuthByEmailRequest'
                - $ref: '#/components/schemas/AuthByUsernameRequest'
              discriminator:
                propertyName: authSource
                mapping:
                  email: '#/components/schemas/AuthByEmailRequest'
                  username: '#/components/schemas/AuthByUsernameRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT access token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                required:
                  - token
        '401':
          description: Invalid credentials
        '500':
          description: Token signing error

  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Indicates that the new user has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: New user could not be created due to invalid input.

  /whiteboards:
    post:
      summary: Create a new whiteboard
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWhiteboardRequest'
      responses:
        '201':
          description: Indicates that the new whiteboard has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whiteboard'
        '400':
          description: New whiteboard could not be created due to invalid input.

  /whiteboards/own:
    get:
      summary: Get user's own whiteboards
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Whiteboard'
        '403':
          description: Not authorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthByEmailRequest:
      type: object
      properties:
        authSource:
          type: string
          enum: [email]
        email:
          type: string
          format: email
          example: tester@example.com
        password:
          type: string
          format: password
          example: password123
      required:
        - authSource
        - email
        - password

    AuthByUsernameRequest:
      type: object
      properties:
        authSource:
          type: string
          enum: [username]
        username:
          type: string
          example: tester
        password:
          type: string
          format: password
          example: password123
      required:
        - authSource
        - username
        - password
    User:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
          example: 64b2f4f1a3c2c8e4a7d3f111
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
      required:
        - _id
        - username
        - email
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        password:
          type: string
          format: password
          example: secret123
      required:
        - username
        - email
        - password
    Canvas:
      type: object
      properties:
        _id:
          type: string
          description: Unique ID of the canvas
        width:
          type: integer
          description: Width of the canvas in pixels
        height:
          type: integer
          description: Height of the canvas in pixels
        time_created:
          type: string
          format: date-time
        time_last_modified:
          type: string
          format: date-time
        editors:
          type: array
          items:
            type: string
            description: User ID of an editor
      required:
        - _id
        - width
        - height
        - time_created
        - time_last_modified
        - editors

    Whiteboard:
      type: object
      properties:
        _id:
          type: string
          description: Unique ID of the whiteboard
        name:
          type: string
          description: Name/title of the whiteboard
        time_created:
          type: string
          format: date-time
          description: Timestamp of creation
        canvases:
          type: array
          items:
            $ref: '#/components/schemas/Canvas'
        owner:
          type: string
          description: User ID of the owner
        shared_users:
          type: array
          items:
            type: string
            description: User IDs of users with shared access
      required:
        - _id
        - name
        - time_created
        - canvases
        - owner
        - shared_users

    CreateWhiteboardRequest:
      type: object
      properties:
        name:
          type: string
          example: First Whiteboard
      required:
        - name
