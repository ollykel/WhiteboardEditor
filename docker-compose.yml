name: whiteboard_editor

services:
  reverse_proxy:
    # Maps urls to ports to various services.
    # Main entry point for external clients.
    build:
      context: ReverseProxy
      cache_from:
        - type=local,src=${DOCKER_CACHE-${HOME}/.cache/docker}
      cache_to:
        - type=local,dest=${DOCKER_CACHE-${HOME}/.cache/docker}
    image: ${WHITEBOARD_EDITOR_CR_URI-whiteboard_editor}/reverse_proxy:${WHITEBOARD_EDITOR_TAG-latest}
    ports:
      - ${WHITEBOARD_EDITOR_HTTP_PORT-8080}:8080
      - ${WHITEBOARD_EDITOR_HTTPS_PORT-4430}:4430
    environment:
      WHITEBOARD_EDITOR_FRONTEND_PORT: ${WHITEBOARD_EDITOR_FRONTEND_PORT-3000}
      WHITEBOARD_EDITOR_WS_PORT: ${WHITEBOARD_EDITOR_WS_PORT-4000}
    volumes:
      - type: bind
        source: ReverseProxy/key.pem
        target: /app/key.pem
      - type: bind
        source: ReverseProxy/cert.pem
        target: /app/cert.pem
    depends_on:
      - frontend
      - rest_api
      - web_socket_server
  
  frontend:
    # Frontend code to serve to client.
    # Built using Vite, served with nginx
    build:
      context: Frontend
      cache_from:
        - type=local,src=${DOCKER_CACHE-${HOME}/.cache/docker}
      cache_to:
        - type=local,dest=${DOCKER_CACHE-${HOME}/.cache/docker}
    image: ${WHITEBOARD_EDITOR_CR_URI-whiteboard_editor}/frontend:${WHITEBOARD_EDITOR_TAG-latest}
    depends_on:
      - web_socket_server
    ports:
      # exposed for testing purposes
      - ${WHITEBOARD_EDITOR_FRONTEND_PORT-3001}:3000

  web_socket_server:
    # Handles web sockets for providing real-time interaction with clients.
    # Contains lightweight runtime environment with only the compiled,
    # executable binary generated from WebSocketServer.
    # Built in Rust.
    build:
      context: WebSocketServer
      target: release_runtime
      cache_from:
        - type=local,src=${DOCKER_CACHE-${HOME}/.cache/docker}
      cache_to:
        - type=local,dest=${DOCKER_CACHE-${HOME}/.cache/docker}
    image: ${WHITEBOARD_EDITOR_CR_URI-whiteboard_editor}/web_socket_server:${WHITEBOARD_EDITOR_TAG-latest}
    environment:
      # Make sure to set MONGO_URI in .env
      MONGO_URI: ${WHITEBOARD_EDITOR_MONGO_URI}
    ports:
      # exposed for testing purposes
      - ${WHITEBOARD_EDITOR_WEB_SOCKET_PORT-3002}:3000

  web_socket_server_tester:
    # Testing environment for WebSocketServer
    profiles:
      - test
    build:
      context: WebSocketServer
      target: test_runtime
      cache_from:
        - type=local,src=${DOCKER_CACHE-${HOME}/.cache/docker}
      cache_to:
        - type=local,dest=${DOCKER_CACHE-${HOME}/.cache/docker}
    depends_on:
      - test_db
    image: ${WHITEBOARD_EDITOR_CR_URI-whiteboard_editor}/web_socket_server_tester:${WHITEBOARD_EDITOR_TAG-latest}
  
  rest_api:
    # Handles RESTful operations on database
    build:
      context: RestAPI
      cache_from:
        - type=local,src=${DOCKER_CACHE-${HOME}/.cache/docker}
      cache_to:
        - type=local,dest=${DOCKER_CACHE-${HOME}/.cache/docker}
    image: ${WHITEBOARD_EDITOR_CR_URI-whiteboard_editor}/rest_api:${WHITEBOARD_EDITOR_TAG-latest}
    environment:
      # make sure to set values in .env
      MONGO_URI: ${WHITEBOARD_EDITOR_MONGO_URI}
      JWT_SECRET: ${WHITEBOARD_EDITOR_JWT_SECRET}
      JWT_EXPIRATION_SECS: ${WHITEBOARD_EDITOR_JWT_EXPIRATION_SECS}
    depends_on:
      test_db:
        condition: service_healthy
    ports:
      # exposed for testing purposes
      - ${WHITEBOARD_EDITOR_REST_API_PORT-3003}:3000

  test_db:
    # Should only be used for testing purposes
    # Volume is not saved between runs, so any data created during the lifetime
    # of a container will be lost on shutdown.
    #
    # To access during testing, set the value of WHITEBOARD_EDITOR_MONGO_URI to
    # mongodb://test_db:27017/testdb
    image: mongo:8.0
    volumes:
      # initialization script
      - ./TestDatabase/init-db.js:/docker-entrypoint-initdb.d/init-db.js:ro
    ports:
      # exposed for testing purposes
      - ${WHITEBOARD_EDITOR_TEST_DB_PORT-3004}:27017
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
