# Test rest_api service
on:
  push:
    paths:
      - 'RestAPI/**'
      - 'docker-compose.yml'
      - '.github/workflows/test_rest_api.yml'
  pull_request:
    on:
      - opened
jobs:
  test_build_rest_api:
    # make sure image builds
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }
      - name: Set up Docker cache
        id: cache-setup
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/docker
          key: ${{ runner.os }}-rest-api-test-build-${{ hashFiles('docker-compose.yml', 'RestAPI/Dockerfile', 'RestAPI/package.json', 'RestAPI/yarn.lock', '.github/workflows/test_rest_api.yml') }}
          restore-keys: |
            ${{ runner.os }}-rest-api-
      - name: Build without cache
        id: build-no-cache
        if: steps.cache-setup.outputs.cache-hit != 'true'
        env:
          DOCKER_CACHE: ${{ runner.temp }}/docker
        run: |
          docker compose build --no-cache rest_api

          echo 'service "rest_api" built successfully'
      - name: Build with cache
        id: build-cached
        if: steps.cache-setup.outputs.cache-hit == 'true'
        env:
          DOCKER_CACHE: ${{ runner.temp }}/docker
        run: |
          docker compose build rest_api

          echo 'service "rest_api" built successfully'
  run_supertest:
    # Run supertest tests within the rest_api container
    runs-on: ubuntu-24.04
    steps:
        # check out repo
      - uses: actions/checkout@v5
      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }
      - name: Set up Docker cache
        id: cache-setup
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/docker
          key: ${{ runner.os }}-rest-api-run-supertest-${{ hashFiles('docker-compose.yml', 'RestAPI/Dockerfile', 'RestAPI/package.json', 'RestAPI/yarn.lock', '.github/workflows/test_rest_api.yml') }}
          restore-keys: |
            ${{ runner.os }}-rest-api-
      - name: Set up test env
        env:
          TEST_ENV: |
            # Docker cache location
            DOCKER_CACHE="${{ runner.temp }}/docker"

            # Secret for signing JSON Web Tokens (JWTs)
            # Should be at least 64 characters in length
            WHITEBOARD_EDITOR_JWT_SECRET=2KUU6DNUY6XGBL2NQFXDXGGVOJ63A75RYSZ5SKD3PMYPCXC6L3I3WRDZER5JA4GC2SOQ2K6W66JUQ3XMM3QT6PXC4UKAFXDDDIIRP4A=

            # URI to access Mongo database
            # Format: mongodb+srv://<USER>:<PASSWORD>@<URL>/<DATABASE>
            WHITEBOARD_EDITOR_MONGO_URI=mongodb://test_db:27017/testdb

            # Number of seconds before a jwt expires
            WHITEBOARD_EDITOR_JWT_EXPIRATION_SECS=999999999

            # To set exposed port for testing
            WHITEBOARD_EDITOR_REST_API_PORT=3001
        run: |
          printenv TEST_ENV > .env
      - name: Start test database
        shell: bash
        run: |
          docker compose -p ${{ github.job }} up --build -d test_db
      - name: Build without cache
        id: build-no-cache
        if: steps.cache-setup.outputs.cache-hit != 'true'
        run: |
          docker compose -p ${{ github.job }} build --no-cache rest_api

          echo 'service "rest_api" built successfully'
      - name: Build with cache
        id: build-cached
        if: steps.cache-setup.outputs.cache-hit == 'true'
        run: |
          docker compose -p ${{ github.job }} build rest_api

          echo 'service "rest_api" built successfully'
      - name: Run supertest
        id: run-supertest
        run: docker compose -p ${{ github.job }} run --entrypoint 'yarn test' rest_api
      - name: Tear down test database
        id: tear-down-test-db
        if: always()
        shell: bash
        run: |
          # Just run for all services, in case we started more services than
          # just test_db.
          docker compose -p ${{ github.job }} down -v
